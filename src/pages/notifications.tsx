import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useEffect } from "react";
import Layout from "~/components/Layout";
import { pusherClient } from "~/utils/pusher";
import {
  useNotificationStore,
  type TNotification,
} from "~/utils/zustand/notifications";

dayjs.extend(relativeTime);

const NotificationsPage: NextPage = () => {
  const { data: session } = useSession();

  if (!session) return null;

  return (
    <>
      <Head>
        <title>Dev Network | Notifications</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <div className="min-h-screen w-full pl-4 pr-8">
          <h2 className="mb-4 text-xl">Notifications For You</h2>
          <NotificationsContainer />
        </div>
      </Layout>
    </>
  );
};

const NotificationsContainer = () => {
  const { data: session } = useSession();
  // const [notifications, setNotifications] = useState<TPusherMsg[]>([]);
  const { notifications, setNotifications } = useNotificationStore();

  useEffect(() => {
    if (!session) return;

    const channel = pusherClient.subscribe(
      `notifications_channel_${session.user.username}`
    );

    channel.bind(`followEvent`, (data: TNotification) =>
      setNotifications(data)
    );

    return () => {
      pusherClient.unsubscribe(
        `notifications_channel_${session.user.username}`
      );

      channel.unbind(`followEvent`, (data: TNotification) =>
        setNotifications(data)
      );
    };
  }, [session, setNotifications]);

  if (notifications.length === 0) {
    return (
      <div className="flex w-full space-x-4 rounded-md border border-blue-2 bg-white p-4 dark:border-accent-6 dark:bg-black">
        No new notifications for you.
      </div>
    );
  }

  if (!session) return <div>You need to Sign In.</div>;

  return (
    <div className="w-full space-y-4">
      {notifications.map((notification, i) => {
        return (
          <div
            className="flex w-full items-center space-x-8 rounded-md border border-blue-2 bg-white p-4 dark:border-accent-6 dark:bg-black"
            key={i}
          >
            <p className="flex-grow">{notification.message} </p>
            <span className="whitespace-nowrap">
              {dayjs(notification.date).fromNow()}
            </span>
          </div>
        );
      })}
    </div>
  );
};

export default NotificationsPage;
