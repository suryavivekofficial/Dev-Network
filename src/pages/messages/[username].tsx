import type { Messages } from "@prisma/client";
import dayjs from "dayjs";
import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import toast from "react-hot-toast";
import Chat from "~/components/Chat";
import Layout from "~/components/Layout";
import Clock from "~/components/icons/ClockIcon";
import LoadingSpinner from "~/components/icons/LoadingSpinner";
import SendIcon from "~/components/icons/SendIcon";
import { api } from "~/utils/api";
import { pusherClient } from "~/utils/pusher";
import { formatChannelName } from "~/utils/snippets/formatPusher";

const UsernameChat: NextPage = () => {
  const router = useRouter();
  const { username } = router.query;
  const selectedChat = username as string;

  const { data, isLoading } = api.user.getUser.useQuery({
    username: selectedChat,
  });

  if (isLoading) {
    return <div>Chat is loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Dev Network | Messages</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <div className="mb-4 mr-8 h-[calc(100vh-10rem)] w-full space-y-2">
          <h2 className="-mt-2 ml-1 hidden text-xl md:block">Your chats</h2>
          <Chat selectedChat={selectedChat}>
            <div className="h-full">
              {selectedChat && (
                <div className="fixed inset-0 z-20 flex h-full flex-grow flex-col bg-black md:static md:inset-auto">
                  <div className="flex w-full space-x-4 border-b border-accent-8 px-4 py-2">
                    <Link href={`/${selectedChat}`}>
                      <div className="relative h-12 w-12 overflow-hidden rounded-full">
                        <Image
                          src={data?.user?.image || "/user.png"}
                          fill={true}
                          alt="profile pic"
                        />
                      </div>
                    </Link>
                    <Link href={`/${selectedChat}`}>
                      <div className="flex flex-col items-center justify-center">
                        <span className="capitalize">{data?.user?.name}</span>
                        <span className="text-xs">{data?.user?.username}</span>
                      </div>
                    </Link>
                  </div>
                  <Msgs selectedChat={selectedChat} />
                  <NewMsgInput receiverUsername={selectedChat} />
                </div>
              )}
            </div>
          </Chat>
        </div>
      </Layout>
    </>
  );
};

const Msgs = ({ selectedChat }: { selectedChat: string }) => {
  const { data: session } = useSession();

  const { data, isLoading } = api.chat.getChat.useQuery({
    otherUsername: selectedChat,
  });

  const ctx = api.useContext();

  useEffect(() => {
    if (!session) return;
    const channelName = formatChannelName(session.user.username, selectedChat);

    const channel = pusherClient.subscribe(`newMsg_${channelName}`);

    const handlePusher = (newMsgFromPusher: Messages) => {
      const msgState = ctx.chat.getChat.getData({
        otherUsername: selectedChat,
      });
      const ifMsgExists = msgState?.some((m) => m.id === newMsgFromPusher.id);
      console.log({ ifMsgExists });

      // Modify the react query state (here) only if a msg is recieved.
      // Because the sender state is modified in the new msg input component. (via optimistic updates)
      if (
        newMsgFromPusher.senderUsername === session.user.username ||
        ifMsgExists
      )
        return;

      ctx.chat.getChat.setData({ otherUsername: selectedChat }, (oldMsgs) => {
        const newMsgsState = Array.isArray(oldMsgs)
          ? [...oldMsgs, newMsgFromPusher]
          : [newMsgFromPusher];
        return newMsgsState;
      });
    };

    channel.bind("msgEvent", (data: Messages) => handlePusher(data));

    return () => {
      pusherClient.unsubscribe(`newMsg_${channelName}`);
      channel.bind("msgEvent", (data: Messages) => handlePusher(data));
    };
  }, [ctx.chat.getChat, selectedChat, session]);

  const msgsRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    msgsRef.current?.scrollIntoView();
  }, [data]);

  if (!session) return null;

  if (isLoading)
    return (
      <div className="flex w-full flex-grow items-center justify-center">
        <LoadingSpinner />
      </div>
    );

  if (data?.length === 0 || !data) {
    return (
      <div className="flex w-full flex-grow items-center justify-center">
        Start sending msgs now.
      </div>
    );
  }

  return (
    <div className="w-full flex-grow overflow-y-scroll rounded-md p-4">
      {data.map((msg) => {
        if (session?.user.username === msg.senderUsername) {
          return <SentMsg key={msg.id} msg={msg} />;
        } else if (session?.user.username === msg.receiverUsername) {
          return <RecievedMsg key={msg.id} msg={msg} />;
        }
      })}
      <div ref={msgsRef} />
    </div>
  );
};

const SentMsg = ({ msg }: { msg: Messages }) => {
  return (
    <div className="flex w-full">
      <span className="my-2 ml-auto w-3/4 max-w-max rounded-md bg-blue-1 px-4 py-2 dark:bg-accent-2">
        <p>{msg.message}</p>
        <div className="flex py-2 text-xs">
          <span className="ml-auto flex space-x-2">
            <Clock size={4} />
            <p>{dayjs(msg.sentAt).fromNow()}</p>
          </span>
        </div>
      </span>
    </div>
  );
};

const RecievedMsg = ({ msg }: { msg: Messages }) => {
  return (
    <div className="flex w-full">
      <span className="my-2 mr-auto w-3/4 max-w-max rounded-md bg-blue-1 px-4 py-2 dark:bg-accent-2">
        <p>{msg.message}</p>
        <div className="flex py-2 text-xs">
          <span className="ml-auto flex space-x-2">
            <Clock size={4} />
            <p>{dayjs(msg.sentAt).fromNow()}</p>
          </span>
        </div>
      </span>
    </div>
  );
};

const NewMsgInput = ({ receiverUsername }: { receiverUsername: string }) => {
  const [newMsg, setNewMsg] = useState("");
  const { data: session } = useSession();
  const ctx = api.useContext();

  const { mutate } = api.chat.newMsg.useMutation({
    onMutate: async ({ msgContent, msgReciever }) => {
      // cancel any outgoing queries
      // await ctx.post.getPosts.cancel();
      await ctx.chat.getChat.cancel();

      // get the data from query cache
      const prevPostsSnapshot = ctx.chat.getChat.getData();

      // Modify the cache
      ctx.chat.getChat.setData(
        { otherUsername: receiverUsername },
        (oldMsgs) => {
          const newMsg: Messages = {
            message: msgContent,
            senderUsername: session?.user.username || "Error",
            receiverUsername: msgReciever,
            sentAt: Date.now() as unknown as Date,
            id: (Math.random() * 10000).toString(),
          };

          const newMsgsState = Array.isArray(oldMsgs)
            ? [...oldMsgs, newMsg]
            : [newMsg];
          return newMsgsState;
        }
      );

      return prevPostsSnapshot;
    },
    onError(error, _, prevPostsSnapshot) {
      ctx.chat.getChat.setData(
        { otherUsername: receiverUsername },
        prevPostsSnapshot
      );
      toast(error.message);
    },

    onSettled() {
      void ctx.chat.getChat.invalidate();
    },
  });

  const handleSubmit = () => {
    setNewMsg("");
    mutate({ msgContent: newMsg, msgReciever: receiverUsername });
  };

  if (!session) return null;

  return (
    <div className="flex w-full space-x-4 border-t border-blue-2 p-4 dark:border-accent-4">
      <input
        onChange={(e) => setNewMsg(e.target.value)}
        value={newMsg}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            handleSubmit();
          }
        }}
        type="text"
        name="new message"
        autoComplete="off"
        className="flex-grow rounded-md border border-blue-2 bg-white px-4 py-2 outline-none focus:ring-1 focus:ring-blue-2 dark:border-accent-4 dark:bg-black dark:focus:ring-accent-8"
      />
      <button
        onClick={handleSubmit}
        className="group rounded-md border border-blue-2 p-2 text-blue-2 drop-shadow-lg dark:border-accent-4 dark:text-white"
      >
        <SendIcon />
      </button>
    </div>
  );
};

export default UsernameChat;
