import type { Messages } from "@prisma/client";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import Layout from "~/components/Layout";
import Clock from "~/components/icons/ClockIcon";
import SendIcon from "~/components/icons/SendIcon";
import { api } from "~/utils/api";

dayjs.extend(relativeTime);

const MessagesPage: NextPage = () => {
  return (
    <>
      <Head>
        <title>Dev Network | Messages</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <div className="mr-8 h-[calc(100vh-10rem)] w-full space-y-2">
          <h2 className="-mt-2 ml-1 text-xl">Your chats</h2>
          <Chats />
        </div>
      </Layout>
    </>
  );
};

const Chats = () => {
  const { data: session } = useSession();
  const { data, isLoading } = api.chat.getChatList.useQuery();
  const [selectedChat, setSelectedChat] = useState("");

  // const temp = new Array<string>(45).fill("username");
  if (!session) {
    return <div>You need to sign in.</div>;
  }

  if (isLoading) return <div>loading...</div>;

  if (!data) return <div>Follow someone to msg them.</div>;

  return (
    <div className="flex h-full w-full rounded-md border border-accent-6 bg-black">
      <div className="w-1/4 space-y-2 overflow-y-scroll border-r border-accent-6 p-2">
        {isLoading && <div>loading</div>}
        {data.map((chatUsername, i) => {
          const username =
            chatUsername.followerUsername || chatUsername.followingUsername;
          return (
            <button
              onClick={() => setSelectedChat(username)}
              className={`${
                selectedChat === username
                  ? "relative rounded-md bg-accent-2 before:absolute before:left-0 before:top-1/2 before:h-4 before:w-1 before:-translate-y-1/2 before:rounded-sm before:bg-white before:content-['']"
                  : ""
              } w-full cursor-pointer border-b border-accent-2 p-2 duration-300 hover:rounded-md hover:bg-accent-2`}
              key={i}
            >
              {username}
            </button>
          );
        })}
      </div>
      <Msgs selectedChat={selectedChat} />
    </div>
  );
};

const Msgs = ({ selectedChat }: { selectedChat: string }) => {
  const { data: session } = useSession();
  if (!session) {
    return <div>You need to sign in to message someone.</div>;
  }
  //fetch the actual chat.
  const { data, isLoading } = api.chat.getChat.useQuery();

  if (selectedChat === "") {
    return <div>Select a chat to view.</div>;
  }

  if (isLoading) return <div>loading...</div>;

  if (!data) return <div>Start sending msgs now.</div>;

  console.log("chat data ", data);
  return (
    <div className="w-3/4 overflow-y-scroll rounded-md p-4">
      {data.map((msg, i) => {
        if (session.user.username === msg.senderUsername) {
          return <SentMsg key={i} msg={msg} />;
        } else if (session.user.username === msg.receiverUsername) {
          return <RecievedMsg key={i} msg={msg} />;
        }
      })}

      <NewMsgInput receiverUsername={selectedChat} />
    </div>
  );
};

const SentMsg = ({ msg }: { msg: Messages }) => {
  return (
    <div className="flex w-full">
      <span className="my-2 ml-auto w-3/4 max-w-max rounded-md bg-accent-2 px-4 py-2">
        <p>{msg.message}</p>
        <div className="flex py-2 text-xs">
          <span className="ml-auto flex space-x-2">
            <Clock size={4} />
            <p>{dayjs(msg.sentAt).fromNow()}</p>
          </span>
        </div>
      </span>
    </div>
  );
};

const RecievedMsg = ({ msg }: { msg: Messages }) => {
  return (
    <div className="flex w-full">
      <span className="my-2 mr-auto w-3/4 max-w-max rounded-md bg-accent-2 px-4 py-2">
        <p>{msg.message}</p>
        <div className="flex py-2 text-xs">
          <span className="ml-auto flex space-x-2">
            <Clock size={4} />
            <p>{dayjs(msg.sentAt).fromNow()}</p>
          </span>
        </div>
      </span>
    </div>
  );
};

const NewMsgInput = ({ receiverUsername }: { receiverUsername: string }) => {
  const [newMsg, setNewMsg] = useState("");
  const { mutate } = api.chat.newMsg.useMutation();

  const handleSubmit = () => {
    mutate({ msgContent: newMsg, msgReciever: receiverUsername });
  };

  return (
    <div className="mt-4 flex w-full space-x-4 border-t border-accent-4 px-2 py-4">
      <input
        onChange={(e) => setNewMsg(e.target.value)}
        value={newMsg}
        type="text"
        name="new message"
        className="flex-grow rounded-md border border-accent-4 bg-accent-2 px-4 py-2 outline-none drop-shadow-lg"
      />
      <button
        onClick={handleSubmit}
        className="group rounded-md border border-accent-4 bg-accent-2 p-2"
      >
        <SendIcon />
      </button>
    </div>
  );
};

export default MessagesPage;
